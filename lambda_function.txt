import boto3
import json

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('todos')

def get_next_id():
    response = table.scan()
    items = response.get('Items', [])
    
    if not items:
        return 1 

    max_id = max(int(item['id']) for item in items) 
    return max_id + 1

def lambda_handler(event, context):
    http_method = event["httpMethod"]
    path = event.get('path', '')

    # fetch all items
    if http_method == "GET" and path == '/items':
        count=table.scan()
        items = count.get('Items',[])
        response = {
            "statusCode": 200,
            "body": json.dumps(items)
        }
        return response
    
    # create new item
    elif http_method == "POST" and path == '/items':
        item_id = get_next_id()
        data = json.loads(event['body']) 
        data['id'] = str(item_id)
        table.put_item(Item=data)

        response = {
           "statusCode": 200,
           "body": json.dumps({"message": "Item added or posted"})
        }
        return response

    # delete all items
    elif http_method == "DELETE" and path == '/items':
        count=table.scan()
        items = count.get('Items',[])
        for item in items:
            table.delete_item(Key={'id': item['id']})
        response = {
           "statusCode": 200,
           "body": json.dumps({"message": "all items deleted"})
        }
        return response
    
    # update item by id 
    elif http_method == "PUT" and path.startswith('/items/'):
        item_id = path.split('/')[-1]
        data = json.loads(event['body']) 
        data['id'] = str(item_id)
        table.put_item(Item=data)

        response = {
           "statusCode": 200,
           "body": json.dumps({"message": "Item updated or posted"})
        }
        return response
        
    # get item by id
    elif http_method == "GET" and path.startswith('/items/'):
        item_id = path.split('/')[-1]
        data = table.get_item(Key={"id": str(item_id)})
        item = data.get("Item")
        if item is not None:
            response = {
               "statusCode": 200,
               "body": json.dumps(item)
            }
            return response
        else:
            response = {
               "statusCode": 404,
               "body": json.dumps({"message": "Item not found"})
            }
            return response
            
    # delete item by id 
    elif http_method == "DELETE" and path.startswith('/items/'):
        item_id = path.split('/')[-1]
        table.delete_item(Key={'id':item_id})
        response = {
           "statusCode": 200,
           "body": json.dumps({"message": "Item deleted"})
        }
        return response
